
# üß© Deployment Strategies: Blue-Green vs Multi-Version Stacks (Lambda + API Gateway)

This document compares two AWS deployment strategies using AWS SAM and API Gateway for Lambda-based microservices.

---

## üîë Key Traits

| Trait                          | Blue-Green Deployment                        | Multi-Version (Parallel Stacks)           |
|--------------------------------|----------------------------------------------|--------------------------------------------|
| # of SAM stacks                | 1                                            | 2                                          |
| Lambda function(s)            | 1 shared function                            | 2 separate functions                       |
| Environment variables          | Shared                                       | Isolated per version                       |
| Lambda aliases used            | ‚úÖ Yes (e.g., blue, green)                   | ‚ùå No                                       |
| API Gateway stages             | prod, v2                                     | prod in each stack                         |
| Base path mapping              | `/` ‚Üí prod (blue), `/v2` ‚Üí v2 (green)        | `/` ‚Üí v1 stack, `/v2` ‚Üí v2 stack           |
| Promotion mechanism            | Alias switch (e.g., green ‚Üí blue)            | Re-map base path or redeploy               |
| Rollback                       | Instant via alias                            | Requires redeployment or re-mapping        |
| Version coexistence            | ‚ùå Only one live version via alias           | ‚úÖ Both versions run concurrently          |

---

## ‚úÖ Pros and Cons

### üü¶ Blue-Green Deployment

**Pros:**
- Simple rollback via alias switch
- Lower AWS resource footprint (1 function, 1 stack)
- Easy to automate in CI/CD

**Cons:**
- Shared function = shared environment variables
- Only one version actively runs at a time
- Slightly harder to test side-by-side

---

### üü® Multi-Version Deployment

**Pros:**
- Full code and environment isolation
- Both versions are live (ideal for `/` and `/v2` routing)
- You need different env vars or code structure
- You expect to support multiple major versions concurrently
- support long-term coexistence of multiple Lambda versions (e.g., legacy, v2, v3).

**Cons:**
- Requires maintaining two stacks
- Slightly higher infrastructure overhead
- Rollback involves re-mapping or redeploying

---

## üéØ Use Cases

| Use Case                                      | Recommended Deployment               |
|----------------------------------------------|--------------------------------------|
| Controlled rollout and safe rollback         | ‚úÖ Blue-Green Deployment              |
| Long-lived side-by-side API versions         | ‚úÖ Multi-Version Deployment           |
| Need for version-specific env/config         | ‚úÖ Multi-Version Deployment           |
| One-at-a-time deployment flow                | ‚úÖ Blue-Green Deployment              |

---

## üìä Summary Comparison Table

| Feature                           | Blue-Green Deployment                 | Multi-Version Deployment              |
|-----------------------------------|--------------------------------------|---------------------------------------|
| SAM Stacks                        | 1                                    | 2                                     |
| Lambda Alias Switching            | ‚úÖ Yes                                | ‚ùå No                                  |
| ENV Isolation                     | ‚ùå No                                 | ‚úÖ Yes                                 |
| Simultaneous Version Availability| ‚ùå No                                 | ‚úÖ Yes                                 |
| Simplicity                       | ‚úÖ Simpler                            | ‚ö†Ô∏è Slightly more complex              |
| Rollback                         | ‚úÖ Easy (alias)                      | ‚ö†Ô∏è Manual (redeploy or remap)         |
| Path Mapping                     | `/`, `/v2` via stages                | `/`, `/v2` via separate stacks        |

---

## üöÄ Deployment Instructions

### üü¶ Blue-Green Deployment Steps

```bash
# Initial Setup
sam deploy --config-env prod     # Deploys to prod with alias blue
sam deploy --config-env v2       # Deploys to v2 with alias green

# Promote green to blue
VERSION=$(aws lambda get-alias   --function-name PocONEOnboardingService   --name green   --query 'FunctionVersion' --output text)

aws lambda update-alias   --function-name PocONEOnboardingService   --name blue   --function-version "$VERSION"
```

---

### üü® Multi-Version Deployment Steps

```bash
# Deploy version 1
sam deploy --config-env v1

# Deploy version 2
sam deploy --config-env v2

# (Optional) Remap base path / to point to v2 instead of v1
# Adjust base path mapping in API Gateway or redeploy with updated route
```
